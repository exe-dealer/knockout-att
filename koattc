#!/usr/bin/env nodejs


var fs = require('fs');
var ent = require('ent');
var koatt = require('./knockout-att');

var html = fs.readFileSync(process.argv[2]).toString();
var attrPrefix = 'data-bind-';


console.log(html.replace(/\<(\w+)((?:\s+[\w-\.]+="[^"]*")+)/g, function (original, tagname, attrs_str) {
    var attrs = [];
    attrs_str.replace(/([\w-\.]+)="([^"]*)"/g, function (_, attname, attval) {
        attrs.push({
            name: attname,
            value: ent.decode(attval)
        });
    });

    var bindstr = koatt.getBindingsStringFromFlatAttrs(attrPrefix, {
        nodeType: 1,
        attributes: attrs
    });

    if (bindstr) {
        // remove all data-bind-* attributes from node
        attrs = attrs.filter(function (att) {
            return !(att.name.lastIndexOf(attrPrefix, 0) === 0);
        });

        attrs.push({
            name: 'data-bind',
            value: bindstr,
        });

        return '<' + tagname + ' ' + attrs
            .map(function (att) { return att.name + '="' + ent.encode(att.value) + '"'; })
            .join(' ');
    } else {
        return original;
    }


}));




// var document = jsdom(html);
// console.log(document.documentElement.outerHTML);

// (function compileFlatBindingsRecursive(node) {
//     if (node.nodeName === 'SCRIPT' && node.type === 'text/html') {
//         var templateDocument = jsdom(node.textContent);
//         compileFlatBindingsRecursive(templateDocument);
//         node.textContent = templateDocument.outerHTML;
//     } else {
//         var bindstr = koatt.getBindingsStringFromFlatAttrs(node);
//         if (bindstr) {
//             // remove all data-bind-* attributes from node
//             Array.prototype.map.call(node.attributes, function (a) { return a.name; })
//                 .filter(function (an) { return an.lastIndexOf('data-bind-', 0) === 0; })
//                 .forEach(function (an) { node.removeAttribute(an);  });

//             node.setAttribute('data-bind', bindstr);
//         }

//         if (node.childNodes) {
//             Array.prototype.forEach.call(
//                 node.childNodes,
//                 compileFlatBindingsRecursive
//             );
//         }
//     }
// })(document);

// console.log(document.outerHTML);
